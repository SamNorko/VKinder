import vk_api
from VK_settings import VKbot_token, user_token, Api_version
from vk_api.longpoll import VkLongPoll, VkEventType
from DB_engine import *
import requests

started_msg = f'''–ü—Ä–∏–≤–µ—Ç, —è - –±–æ—Ç, –∞ –∑–æ–≤—É—Ç –º–µ–Ω—è Vkinder
                üîπ–ü–æ—Ä–∞ –Ω–∞—á–∏–Ω–∞—Ç—å –ø–æ–∏—Å–∫ –ø–∞—Ä—ã!

                ‚ùì–ö–∞–∫ –∏—Å–∫–∞—Ç—å? –û—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ!üëá
                ‚ñ∂–í–≤–µ–¥–∏ –ø–æ–ª(–¥–µ–≤—É—à–∫–∞ –∏–ª–∏ –ø–∞—Ä–µ–Ω—å) *–ø—Ä–æ–±–µ–ª* –¥–∏–∞–ø–∞–∑–æ–Ω –≤–æ–∑—Ä–∞—Å—Ç–∞ (–æ—Ç 18 –¥–æ 99 —á–µ—Ä–µ–∑ —Ç–∏—Ä–µ) *–ø—Ä–æ–±–µ–ª* –≥–æ—Ä–æ–¥‚óÄ

                –ü–†–ò–ú–ï–†:
                –¥–µ–≤—É—à–∫–∞ 18-20 –ú–æ—Å–∫–≤–∞'''

def bot_send_msg(id, msg, attachment=None):
    vk.method('messages.send',
    {'user_id': id,
    'message': msg,
    'random_id': 0,
    'attachment': attachment})

def error_msg(id):
    bot_send_msg(id, started_msg)

def search_users(sex, lower_bound, upper_bound, city, user_id):
    all_persons = []
    vk = vk_api.VkApi(token=user_token)
    while len(all_persons) < 1:
        response = vk.method('users.search',
                            {'sex': sex,
                            'status': 1,
                            'age_from': lower_bound,
                            'age_to': upper_bound,
                            'has_photo': 1,
                            'count': 25,
                            'online': 1,
                            'hometown': city
                            })
        for element in response['items']:
            person = [
                element['first_name'],
                element['last_name'],
                'https://vk.com/id' + str(element['id']),
                element['id']
            ]
            get_photo(person)
            if(len(person[4]) > 0 and not check_pair(user_id, int(person[3]))): 
                all_persons.append(person)
    return all_persons

def get_photo(person):
    vk = vk_api.VkApi(token=user_token)
    users_photos = []
    try:
        response = vk.method('photos.get',
                              {
                                  'access_token': user_token,
                                  'v': Api_version,
                                  'owner_id': person[3],
                                  'album_id': 'profile',
                                  'count': 10,
                                  'extended': 1,
                                  'photo_sizes': 1,
                              })
        for i in range(10):
            users_photos.append(
                [response['items'][i]['likes']['count'] + response['items'][i]['comments']['count'],
                    'photo' + str(response['items'][i]['owner_id']) + '_' + str(response['items'][i]['id'])])
        users_photos.sort(reverse=True, key=lambda x: x[0])
        person.append(users_photos[:3])
    except:
        person.append([])

def main_bot_loop():
    for this_event in longpoll.listen():
        if this_event.type == VkEventType.MESSAGE_NEW and this_event.to_me:
            return this_event.text.lower(), this_event.user_id

if __name__ == '__main__':
    try:
        vk = vk_api.VkApi(token=VKbot_token)
    except:
        print("Enable to connect to VKapi")
    try:    
        run_db()
    except:
        print("Enable to connect to DB")
    while True:
        longpoll = VkLongPoll(vk)
        try:
            text, user_id = main_bot_loop()
            text_splited = text.split()
            if not is_user_registered(user_id):
                user_registration(user_id)
            if text == '–Ω–∞—á–∞—Ç—å':
                bot_send_msg(user_id, started_msg)
            elif len(text_splited) == 3:
                if text_splited[0].lower() == "–¥–µ–≤—É—à–∫–∞":
                    sex = 1
                elif text_splited[0].lower() == "–ø–∞—Ä–µ–Ω—å":
                    sex = 2
                else:
                    error_msg(user_id)
                    continue
                city = text_splited[2].lower()
                age_splited = text_splited[1].split("-")
                try:
                    lower_bound = int(age_splited[0])
                    upper_bound = int(age_splited[1])
                    if lower_bound > upper_bound or lower_bound > 99:
                        bot_send_msg(user_id, "–¢—ã —á—Ç–æ-—Ç–æ –Ω–∞–ø—É—Ç–∞–ª —Å –≤–æ–∑—Ä–∞—Å—Ç–æ–º, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑, –≤–æ—Ç —Ç–µ–±–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:")
                        bot_send_msg(user_id, started_msg)
                        continue
                    if lower_bound < 18:
                        bot_send_msg(user_id, "–ù–µ –º–ª–∞–¥—à–µ 18, —è –ø–æ–ø—Ä–∞–≤–∏–ª, –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π :)")
                        lower_bound = 18
                    if upper_bound > 99:
                        bot_send_msg(user_id, "–ù–µ —Å—Ç–∞—Ä—à–µ 99, —è –ø–æ–ø—Ä–∞–≤–∏–ª –û_–æ")
                        upper_bound = 99
                except:
                    bot_send_msg(user_id, "–¢—ã —á—Ç–æ-—Ç–æ –Ω–∞–ø—É—Ç–∞–ª —Å –≤–æ–∑—Ä–∞—Å—Ç–æ–º, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑, –≤–æ—Ç —Ç–µ–±–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:")
                    bot_send_msg(user_id, started_msg)
                    continue
                bot_send_msg(user_id, "–í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–Ω–∫–µ—Ç, –ø–æ–¥–æ–∂–¥–∏—Ç–µ")
                for person in search_users(sex,lower_bound,upper_bound,city, user_id):
                    bot_send_msg(user_id,f'\n{person[0]}  {person[1]}  {person[2]}',)
                    bot_send_msg(user_id, f'—Ñ–æ—Ç–æ:',attachment=','.join([person[4][0][1],person[4][1][1],person[4][2][1]]))
                    add_pair(user_id,person[3])
                    bot_send_msg(user_id, "–ù–∞–ø–∏—à–∏ \"–¥–∞–ª–µ–µ\" –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∞–Ω–∫–µ—Ç—ã")
                    text, user_id = main_bot_loop()
                    if text.lower() == "–¥–∞–ª–µ–µ":
                        continue
                    else:
                        bot_send_msg(user_id, "–ü—Ä–æ—Å—Ç–∏, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π:")
                        error_msg(user_id)
                        continue
                bot_send_msg(user_id, "–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
            if text == "q" or text == "–≤—ã—Ö–æ–¥" or text == "quit":
                break
            else:
                bot_send_msg(user_id, "–ü—Ä–æ—Å—Ç–∏, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π:")
                error_msg(user_id)
        except requests.exceptions.ReadTimeout as timeout:
            continue
    disconnect_db()